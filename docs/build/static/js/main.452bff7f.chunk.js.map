{"version":3,"sources":["components/Display.js","components/Error.js","components/Activity.js","App.js","serviceWorker.js","index.js"],"names":["Display","useState","id","category","input","setInput","className","onSubmit","e","preventDefault","navigate","name","onChange","newCategory","target","value","selected","type","Error","onClick","Activity","props","results","setResults","error","setError","changeHandler","useEffect","axios","get","then","response","data","console","log","catch","err","Object","keys","map","item","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.452bff7f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { navigate } from \"@reach/router\";\n\nconst Display = () => {\n  const [input, setInput] = useState({\n    id: \"\",\n    category: \"people\",\n  });\n  const handleCategory = (e) => {\n    const newCategory = e.target.value;\n    setInput({ ...input, [e.target.name]: newCategory });\n  };\n  const submitHandler = (e) => {\n    e.preventDefault();\n    navigate(`/${input.category}/${input.id}`);\n  };\n  const changeHandler = (e) => {\n    setInput({ ...input, [e.target.name]: e.target.value });\n  };\n  return (\n    <div>\n      <div className=\"d-flex justify-content-center\">\n        <div className=\"row\">\n          <div className=\"col-lg-6\"></div>\n          <form onSubmit={submitHandler}>\n            <div className=\"form-group\">\n              <h3>Choose a Category: </h3>\n              <select\n                className=\"custom-select\"\n                name=\"category\"\n                onChange={handleCategory}\n              >\n                <option selected>Choose a Category</option>\n                <option value=\"people\">Person</option>\n                <option value=\"planets\">Planet</option>\n                <option value=\"starships\">Starship</option>\n              </select>\n            </div>\n            <div className=\"form-group\">\n              <h3>To find a target,number goes bellow! </h3>\n              <input\n                className=\"form-control form-control-sm\"\n                type=\" text\"\n                name=\"id\"\n                onChange={changeHandler}\n              />\n              <br />\n              <input className=\"btn btn-primary\" type=\"submit\" value=\"Search\" />\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Display;\n","import React from \"react\";\nimport { navigate } from \"@reach/router\";\n\nexport default function Error() {\n  const clickHandler = (e) => {\n    navigate(\"/\");\n  };\n  return (\n    <div>\n      <input\n        className=\"btn btn-danger\"\n        value=\"Dismiss\"\n        onClick={clickHandler}\n      />\n      <h1>404</h1>\n      <h3>NO,NO,NO,I think you're lost</h3>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { navigate } from \"@reach/router\";\nimport Error from \"./Error\";\n\nconst Activity = (props) => {\n  const [input, setInput] = useState({\n    id: props.id,\n    category: props.category,\n  });\n\n  const [results, setResults] = useState([]);\n  const [error, setError] = useState(false);\n\n  const changeHandler = (e) => {\n    setInput({ ...input, [e.target.name]: e.target.value });\n  };\n  const submitHandler = (e) => {\n    e.preventDefault();\n    axios\n      .get(`https://swapi.dev/api/${input.category}/${input.id}`)\n      .then((response) => {\n        setResults(response.data);\n        console.log(response);\n      })\n\n      .catch((err) => setError(true));\n    navigate(`/${input.category}/${input.id}`);\n  };\n\n  useEffect(() => {\n    axios\n      .get(`https://swapi.dev/api/${input.category}/${input.id}`)\n      .then((response) => {\n        setResults(response.data);\n        console.log(response);\n      })\n      .catch((err) => {\n        setError(true);\n      });\n  }, []);\n\n  return (\n    <div className=\"container m-5\">\n      <div className=\"d-flex justify-content-center\">\n        <div className=\"row\">\n          <div className=\"col-lg-6\"></div>\n          <form onSubmit={submitHandler}>\n            <div className=\"form-group\">\n              <select\n                className=\"custom-select\"\n                name=\"category\"\n                onChange={changeHandler}\n              >\n                <option selected>Choose a Category</option>\n                <option value=\"people\">Person</option>\n                <option value=\"planets\">Planet</option>\n                <option value=\"starships\">Starship</option>\n              </select>\n            </div>\n            <div className=\"form-group\">\n              <h3>To find a target,number goes bellow! </h3>\n              <input\n                className=\"form-control form-control-sm\"\n                type=\" text\"\n                name=\"id\"\n                onChange={changeHandler}\n              />\n              <br />\n              <input className=\"btn btn-primary\" type=\"submit\" value=\"Search\" />\n            </div>\n          </form>\n        </div>\n      </div>\n      {!error ? (\n        Object.keys(results).map((item) => (\n          <p>\n            {item}: {results[item]}\n          </p>\n        ))\n      ) : (\n        <Error />\n      )}\n    </div>\n  );\n};\nexport default Activity;\n","import React, { Fragment } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { Router, navigate } from \"@reach/router\";\nimport Display from \"./components/Display\";\nimport Activity from \"./components/Activity\";\n\nfunction App() {\n  const clickHandler = (e) => {\n    navigate(\"/\");\n  };\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <h1 className=\"display-3\">Heyyyo</h1>\n        <p className=\"lead\">Welcome,it's all about Star Wars in here!</p>\n        <h4>Never watched the movie but I'll give it a try , I promise</h4>\n        <hr className=\"my-5\"></hr>\n        <p>When you're ready start clicking or/and typing :~| </p>\n        <input\n          className=\"btn btn-lg btn-info\"\n          value=\"Home\"\n          onClick={clickHandler}\n        />\n      </div>\n      <Router>\n        <Display exact path=\"/\" />\n        <Activity exact path=\"/:category/:id\" component={Activity} />\n      </Router>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}